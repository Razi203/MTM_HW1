        -:    0:Source:RLEList.c
        -:    1:#include "RLEList.h"
        -:    2:
        -:    3:struct RLEList_t {
        -:    4:    char val;
        -:    5:    int count;
        -:    6:    struct RLEList_t *next;
        -:    7:};
        -:    8:
        -:    9://implement the functions here
        -:   10:
  1316532:   11:RLEList RLEListCreate(){
  1316532:   12:    RLEList new_list = malloc(sizeof(*new_list));
  1316532:   13:    if (!new_list){
    #####:   14:        return NULL;
        -:   15:    }
  1316532:   16:    new_list -> next = NULL;
  1316532:   17:    new_list -> count = 0;
  1316532:   18:    new_list -> val = 0;
  1316532:   19:    return new_list;
        -:   20:}
        -:   21:
        -:   22:
      838:   23:void RLEListDestroy(RLEList list){
  1317370:   24:    while(list){
  1316532:   25:        RLEList toDestroy=list;
  1316532:   26:        list=list->next;
  1316532:   27:        free(toDestroy);
        -:   28:    }
      838:   29:}
        -:   30:
        -:   31:
        -:   32:
160591696:   33:RLEListResult RLEListAppend(RLEList list, char value){
160591696:   34:    if (list == NULL){
    #####:   35:        return RLE_LIST_NULL_ARGUMENT;
        -:   36:    }
160591696:   37:    if (list -> count == 0){
      834:   38:        list -> val = value;
      834:   39:        list -> count++;
      834:   40:        return RLE_LIST_SUCCESS;
        -:   41:    }
201484951202:   42:    while (list -> next != NULL){
201324360340:   43:        list = list -> next;
        -:   44:    }
160590862:   45:    if (list -> val == value){
159275168:   46:        list -> count++;
159275168:   47:        return RLE_LIST_SUCCESS;
        -:   48:    }
  1315694:   49:    RLEList node = RLEListCreate();
  1315694:   50:    if (node == NULL){
    #####:   51:        return RLE_LIST_OUT_OF_MEMORY;
        -:   52:    }
  1315694:   53:    node -> count = 1;
  1315694:   54:    node -> val = value;
  1315694:   55:    node -> next = list -> next;
  1315694:   56:    list -> next = node;
  1315694:   57:    return RLE_LIST_SUCCESS;
        -:   58:}
        -:   59:
        -:   60:
160592115:   61:int RLEListSize(RLEList list){
160592115:   62:    if(list == NULL){
    #####:   63:        return -1;
        -:   64:    }
160592115:   65:    int size = 0;
402989282713:   66:    while(list != NULL){
402828690598:   67:        size += list->count;
402828690598:   68:        list = list->next;
        -:   69:    }
160592115:   70:    return size;
        -:   71:}
        -:   72:
        -:   73:
    #####:   74:RLEListResult RLEListRemove(RLEList list, int index){
    #####:   75:    if (list == NULL){
    #####:   76:        return RLE_LIST_NULL_ARGUMENT;
        -:   77:    }
    #####:   78:    if (index < 0 || index >= RLEListSize(list)){
    #####:   79:        return RLE_LIST_INDEX_OUT_OF_BOUNDS;
        -:   80:    }
    #####:   81:    RLEList prev = list;
    #####:   82:    while (index >= list->count){
    #####:   83:        index -= list->count;
    #####:   84:        prev = list;
    #####:   85:        list = list -> next;
        -:   86:    }
        -:   87:
    #####:   88:    if (list -> count > 1){
    #####:   89:        list -> count--;
    #####:   90:        return RLE_LIST_SUCCESS;
        -:   91:    }
    #####:   92:    if (list -> next == NULL){
    #####:   93:            list -> count = 0;
    #####:   94:            return RLE_LIST_SUCCESS;
        -:   95:    }
    #####:   96:    if (prev == list){
    #####:   97:        RLEList to_be_removed = list -> next;
    #####:   98:        list -> val = to_be_removed -> val;
    #####:   99:        list -> next = to_be_removed -> next;
    #####:  100:        list -> count = to_be_removed -> count;
    #####:  101:        free(to_be_removed);
    #####:  102:        return RLE_LIST_SUCCESS;
        -:  103:    }
    #####:  104:    prev -> next = list -> next;
    #####:  105:    free(list);
    #####:  106:    if (prev -> val == prev -> next -> val){
    #####:  107:        RLEList to_be_removed = prev -> next;
    #####:  108:        prev -> count += to_be_removed -> count;
    #####:  109:        prev -> next = to_be_removed -> next;
    #####:  110:        free(to_be_removed);
        -:  111:    }
    #####:  112:    return RLE_LIST_SUCCESS;
        -:  113:}
        -:  114:
 80295848:  115:char RLEListGet(RLEList list, int index, RLEListResult *result){
 80295848:  116:    if (result == NULL){
    #####:  117:        RLEListResult dummy = RLE_LIST_ERROR;
    #####:  118:        result = &dummy; 
        -:  119:    }
        -:  120:
 80295848:  121:    if (list == NULL){
    #####:  122:        *result = RLE_LIST_NULL_ARGUMENT;
    #####:  123:        return 0;
        -:  124:    }
 80295848:  125:    if(index < 0 || index >= RLEListSize(list)){
    #####:  126:        *result=RLE_LIST_INDEX_OUT_OF_BOUNDS;
    #####:  127:        return 0;
        -:  128:    }
        -:  129:
 80295848:  130:    int currentIndex=0;
100743133865:  131:    while(list != NULL && (currentIndex + list->count <= index)){
100662838017:  132:        currentIndex += list->count;
100662838017:  133:        list = list->next;
        -:  134:    }
        -:  135:    
 80295848:  136:    char returnedChar = list->val;
 80295848:  137:    *result = RLE_LIST_SUCCESS;
 80295848:  138:    return returnedChar;
        -:  139:}
        -:  140:
      419:  141:RLEListResult RLEListMap(RLEList list, MapFunction map_function){
      419:  142:    if (list == NULL || map_function == NULL){
    #####:  143:        return RLE_LIST_NULL_ARGUMENT;
        -:  144:    }
      419:  145:    RLEList prev = list;
   658685:  146:    while (list != NULL){
   658266:  147:        list -> val = map_function(list -> val);
   658266:  148:        if (prev != list && prev -> val == list -> val){
    #####:  149:            prev -> count += list -> count;
    #####:  150:            prev -> next = list -> next;
    #####:  151:            free(list);
    #####:  152:            list = prev;
        -:  153:        }
   658266:  154:        prev = list;
   658266:  155:        list = list -> next;
        -:  156:    }
      419:  157:    return RLE_LIST_SUCCESS;
        -:  158:}
        -:  159:
      419:  160:int countDigits(RLEList list){
      419:  161:    int digits = 0;
   658685:  162:    while (list != NULL){
   658266:  163:        int num = list -> count;
  1841977:  164:        while (num > 0){
  1183711:  165:            digits++;
  1183711:  166:            num /= 10;
        -:  167:        }
   658266:  168:        list = list -> next;
        -:  169:    }
      419:  170:    return digits;
        -:  171:}
        -:  172:
   658264:  173:void reverseString(char *str, int size){
  1171159:  174:    while (size > 1){
   512895:  175:        char temp = *str;
   512895:  176:        *str = str[size-1];
   512895:  177:        *(str++ + size-1) = temp;
   512895:  178:        size -= 2;
        -:  179:    }
   658264:  180:}
        -:  181:
        -:  182:
      419:  183:char* RLEListExportToString(RLEList list, RLEListResult* result){
      419:  184:    if (result == NULL){
    #####:  185:        RLEListResult dummy = RLE_LIST_ERROR;
    #####:  186:        result = &dummy; 
        -:  187:    }
        -:  188:    
      419:  189:    if(list==NULL){
    #####:  190:        *result=RLE_LIST_NULL_ARGUMENT;
    #####:  191:        return NULL;
        -:  192:    }
      419:  193:    int RLEListLen=0;
      419:  194:    RLEList head=list;
   658683:  195:    while(head && head -> count != 0){
   658264:  196:        RLEListLen++;
   658264:  197:        head=head->next;
        -:  198:    }
      419:  199:    int size = 2*RLEListLen + countDigits(list);
      419:  200:    char *returnedStr = malloc(size + 1);
      419:  201:    if(returnedStr==NULL){
    #####:  202:        *result = RLE_LIST_OUT_OF_MEMORY;
    #####:  203:        return NULL;
        -:  204:    }
      419:  205:    int i = 0;
   658683:  206:    while(i < size){
   658264:  207:        returnedStr[i++] = list->val;
   658264:  208:        int start = i, num = list -> count;
  1841975:  209:        while(num > 0){
  1183711:  210:            returnedStr[i++] = num % 10 + '0';
  1183711:  211:            num /= 10;
        -:  212:        }
   658264:  213:        reverseString(returnedStr + start, i - start);
   658264:  214:        returnedStr[i++] = '\n';
   658264:  215:        list=list->next;
        -:  216:    }
      419:  217:    returnedStr[size]='\0';
      419:  218:    *result=RLE_LIST_SUCCESS;
      419:  219:    return returnedStr;
        -:  220:}
        -:  221:
